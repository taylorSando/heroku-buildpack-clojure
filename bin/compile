#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# parse args
export BUILD_DIR=$1
export CACHE_DIR=$2
export ENV_DIR=$3

BP_DIR=$(cd $(dirname $0)/..; pwd)
BIN_DIR=$BP_DIR/bin
LIB_DIR=$BP_DIR/lib
. $LIB_DIR/common.sh

export_env_dir $ENV_DIR

# Load common JVM functionality from https://github.com/heroku/heroku-buildpack-jvm-common
JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz}
mkdir -p /tmp/jvm-common
curl --retry 3 --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java
install_java_with_overlay ${BUILD_DIR}

# install leiningen jar
BOOT_JAR_URL="https://github.com/boot-clj/boot/releases/download/2.6.0/boot.jar"
BOOT_JAR_CACHE_PATH="$CACHE_DIR/boot.jar"
BOOT_JAR_SLUG_PATH="$BUILD_DIR/.boot/boot.jar"

if [ ! -r "$BOOT_JAR_CACHE_PATH" ]; then
  echo "-----> Installing Bootingen"
  echo "       Downloading: bootingen-$BOOT_VERSION-standalone.jar"
  mkdir -p $(dirname $BOOT_JAR_CACHE_PATH)
  curl --retry 3 --silent --show-error --max-time 120 -L -o "$BOOT_JAR_CACHE_PATH" $BOOT_JAR_URL
else
  echo "-----> Using cached Bootingen $BOOT_VERSION"
fi

mkdir -p "$BUILD_DIR/.boot"
cp "$BOOT_JAR_CACHE_PATH" "$BOOT_JAR_SLUG_PATH"

# install boot script
BOOT_BIN_PATH=$BUILD_DIR"/.boot/bin/boot"
echo "       Writing: boot script"
mkdir -p $(dirname $BOOT_BIN_PATH)
cp $BOOT_BIN_SOURCE $BOOT_BIN_PATH
sed -i s/##BOOT_VERSION##/$BOOT_VERSION/ $BOOT_BIN_PATH

# unpack existing cache
CACHED_DIRS=".m2 node_modules"
for DIR in $CACHED_DIRS; do
  if [ ! -d $BUILD_DIR/$DIR ]; then
    cache_copy $DIR $CACHE_DIR $BUILD_DIR
  fi
done

echo "-----> Building with Boot"

# extract environment
if [ -d "$ENV_DIR" ]; then
    # if BUILD_CONFIG_WHITELIST is set, read it to know which configs to export
    if [ -r $ENV_DIR/BUILD_CONFIG_WHITELIST ]; then
        for e in $(cat $ENV_DIR/BUILD_CONFIG_WHITELIST); do
            export "$e=$(cat $ENV_DIR/$e)"
        done
    # otherwise default BUILD_CONFIG_WHITELIST to just private repo creds
    else
        for e in BOOT_USERNAME BOOT_PASSWORD BOOT_PASSPHRASE; do
            if [ -r $ENV_DIR/$e ]; then
                export "$e=$(cat $ENV_DIR/$e)"
            fi
        done
    fi
fi

# Calculate build command
if [ "$BUILD_COMMAND" = "" ]; then
    if [ -x $BUILD_DIR/bin/build ]; then
        echo "       Found bin/build; running it instead of default boot invocation."
        BUILD_COMMAND=bin/build
    else
        BUILD_COMMAND="boot $BOOT_BUILD_TASK"
    fi
fi

echo "       Running: $BUILD_COMMAND"

cd $BUILD_DIR
PATH=.boot/bin:$PATH JVM_OPTS="-Xmx600m" \
  BOOT_JVM_OPTS="-Xmx400m -Duser.home=$BUILD_DIR" \
  $BUILD_COMMAND 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build."
  exit 1
fi

# default Procfile
if [ ! -r $BUILD_DIR/Procfile ]; then
  if [ "$BOOT_VERSION" = "1.7.1" ]; then
    echo "       No Procfile; using \"web: boot trampoline run\"."
    echo "web: boot trampoline run" > $BUILD_DIR/Procfile
  else
    echo "       No Procfile; using \"web: boot with-profile production trampoline run\"."
    echo "web: boot with-profile production trampoline run" > $BUILD_DIR/Procfile
  fi
fi

# repack cache with new assets
mkdir -p $CACHE_DIR
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $BUILD_DIR $CACHE_DIR
done

if [ "$BOOT_INCLUDE_IN_SLUG" = "no" ]; then
    rm "$BOOT_JAR_SLUG_PATH"
    rm -rf $CACHED_DIRS
fi
